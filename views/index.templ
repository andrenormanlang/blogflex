package views

import (
    "blogflex/internal/models"
    "fmt"
)

func MainPageHandler(w http.ResponseWriter, r *http.Request) {
    session, _ := store.Get(r, "session-name")
    userID := session.Values["userID"]
    loggedIn := userID != nil

    query := `
        query {
            blogs {
                id
                name
                description
                image_path
                user {
                    username
                }
                created_at
                posts(order_by: {created_at: desc}, limit: 1) {
                    title
                    created_at
                }
            }
        }
    `
    result, err := database.ExecuteGraphQL(query, nil)
    if err != nil {
        http.Error(w, "Failed to fetch blogs", http.StatusInternalServerError)
        return
    }

    blogsData, ok := result["blogs"].([]interface{})
    if !ok {
        http.Error(w, "Invalid data format for blogs", http.StatusInternalServerError)
        return
    }

    var blogs []models.Blog
    for _, blogData := range blogsData {
        blogMap, ok := blogData.(map[string]interface{})
        if !ok {
            log.Printf("Invalid data format for blogData")
            continue
        }

        userMap, ok := blogMap["user"].(map[string]interface{})
        if !ok {
            log.Printf("Invalid data format for user")
            continue
        }

        var imagePath string
        if blogMap["image_path"] != nil {
            imagePath, ok = blogMap["image_path"].(string)
            if !ok {
                log.Printf("image_path is not a string")
                imagePath = ""  // Assign a default value or handle the error as needed
            }
        }

        var latestPost *models.Post
        posts, ok := blogMap["posts"].([]interface{})
        if ok && len(posts) > 0 {
            postMap, ok := posts[0].(map[string]interface{})
            if !ok {
                log.Printf("Invalid data format for post")
                continue
            }

            createdAt, err := time.Parse("2006-01-02T15:04:05", postMap["created_at"].(string))
            if err != nil {
                log.Printf("Error parsing post created_at time: %v", err)
                continue
            }

            latestPost = &models.Post{
                Title:             postMap["title"].(string),
                FormattedCreatedAt: helpers.FormatTime(createdAt),
            }
        }

        createdAtStr := blogMap["created_at"].(string)
        createdAt, err := time.Parse("2006-01-02T15:04:05", createdAtStr)
        if err != nil {
            log.Printf("Error parsing blog created_at time: %v", err)
            continue
        }

        blogs = append(blogs, models.Blog{
            ID:                 uint(blogMap["id"].(float64)),
            Name:               blogMap["name"].(string),
            Description:        blogMap["description"].(string),
            ImagePath:          imagePath,
            FormattedCreatedAt: helpers.FormatTime(createdAt),
            User: &models.User{
                Username: userMap["username"].(string),
            },
            LatestPost: latestPost,
        })
    }

    log.Printf("Blogs: %+v", blogs)

    component := views.MainPage(blogs, loggedIn)
    templ.Handler(component).ServeHTTP(w, r)
}
