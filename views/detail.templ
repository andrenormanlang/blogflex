package views

import (
	"blogflex/internal/models"
	"fmt"
	"strconv"
)

templ PostDetail(post models.Post, loggedIn bool, isOwner bool, loggedInUserID string) {
	<html>
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>BlogFlex</title>
			<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet"/>
			<link href="/static/css/tailwind.generated.css" rel="stylesheet"/>
			<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet"/>
			<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"/>
			<style>
        body {
          font-family: 'Inter', sans-serif;
          background-color: #121212;
          color: #e0e0e0;
        }
        .content-container {
          background-color: #1e1e1e;
          color: #e0e0e0;
          border-radius: 10px;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .content-container h1,
        .content-container h2 {
          color: #bb86fc;
        }
        .content-container a {
          color: #bb86fc;
        }
        .content-container a:hover {
          color: #3700b3;
        }
        .content-container .text-gray-500 {
          color: #a0a0a0;
        }
        .content-container .text-gray-700 {
          color: #e0e0e0;
        }
        .content-container .btn-primary {
          background-color: #bb86fc;
          border: none;
        }
        .content-container .btn-primary:hover {
          background-color: #3700b3;
        }
        .content-container .btn-warning {
          background-color: #ff9800;
          color: #121212;
          border: none;
        }
        .content-container .btn-warning:hover {
          background-color: #e68900;
        }
        .content-container .btn-danger {
          background-color: #dc3545;
          border: none;
        }
        .content-container .btn-danger:hover {
          background-color: #c82333;
        }
        .content-container .list-group-item {
          background-color: #2c2c2c;
          border-color: #444;
        }
        .form-control {
          background-color: #2c2c2c;
          border: none;
          color: #e0e0e0;
        }
        .form-control:focus {
          background-color: #2c2c2c;
          color: #e0e0e0;
        }
        .d-none {
          display: none;
        }
        .htmx-indicator {
          display: none;
        }
        .htmx-request .htmx-indicator {
          display: block;
        }
        .htmx-request.htmx-indicator {
          display: block;
        }
      </style>
			<script>
        function resetCommentForm() {
          var form = document.getElementById('comment-form');
          if (form) {
            form.reset();
            var submitButton = form.querySelector('button[type="submit"]');
            if (submitButton) {
              submitButton.disabled = false;
            }
            // Re-enable the form for another submission
            form.removeAttribute('hx-trigger-once');
          }
        }
        
        document.addEventListener('htmx:afterSwap', function(event) {
          // Check if the event was triggered by a comment submission
          if (event.detail.target.id === 'comments-section') {
            resetCommentForm();
          }
        });
        
        document.addEventListener('htmx:responseError', function(event) {
          console.error('HTMX Error:', event.detail);
          resetCommentForm();
        });
        
        // Listen for the custom event to clear the form
        document.addEventListener('resetCommentForm', function(event) {
          console.log('Reset comment form event received');
          resetCommentForm();
        });
        
        // Prevent multiple form submissions
        document.addEventListener('htmx:beforeRequest', function(event) {
          if (event.detail.elt.id === 'comment-form') {
            // Disable the submit button during the request
            var submitButton = event.detail.elt.querySelector('button[type="submit"]');
            if (submitButton) {
              submitButton.disabled = true;
            }
          }
        });
        
        document.addEventListener('htmx:afterRequest', function(event) {
          if (event.detail.elt.id === 'comment-form') {
            // Re-enable the submit button after the request
            resetCommentForm();
          }
        });
      </script>
		</head>
		<body>
			@NavBar(loggedIn)
			<div class="max-w-6xl mx-auto p-6 content-container mt-10">
				<h1 class="text-3xl font-bold mb-6">
					@UnsafeHTML(post.Title)
				</h1>
				<p class="text-gray-500 mb-4">Posted on { post.FormattedCreatedAt }</p>
				<p class="text-gray-700 mb-4">
					@UnsafeHTML(post.Content)
				</p>
				if isOwner {
					<a href={ templ.SafeURL("/protected/posts/" + fmt.Sprintf("%d/edit", post.ID)) } class="btn btn-warning mr-2">Edit Post</a>
					<button hx-delete={ fmt.Sprintf("/protected/posts/%d", post.ID) } hx-confirm="Are you sure you want to delete this post?" class="btn btn-danger">Delete Post</button>
				}
				<div class="mt-3 mb-3">
					if isOwner {
						<!-- Post owners can't like their own posts -->
						<button id="like-button" class="btn btn-outline-secondary" disabled>
							<i class="fas fa-thumbs-up"></i> <span id="likes-count">{ strconv.Itoa(post.LikesCount) }</span>
						</button>
						<small class="text-muted ml-2">You can't like your own post</small>
					} else if !loggedIn {
						<!-- Not logged in users see a disabled button -->
						<button id="like-button" class="btn btn-outline-secondary" disabled>
							<i class="fas fa-thumbs-up"></i> <span id="likes-count">{ strconv.Itoa(post.LikesCount) }</span>
						</button>
						<small class="text-muted ml-2">Log in to like this post</small>
					} else if post.UserHasLiked {
						<!-- User has already liked the post -->
						<button id="like-button" hx-post={ fmt.Sprintf("/protected/posts/%d/like", post.ID) } hx-target="#like-button" hx-swap="outerHTML" class="btn btn-primary">
							<i class="fas fa-thumbs-up"></i> <span id="likes-count">{ strconv.Itoa(post.LikesCount) }</span>
						</button>
						<small class="text-muted ml-2">You liked this post</small>
					} else {
						<!-- User can like the post -->
						<button id="like-button" hx-post={ fmt.Sprintf("/protected/posts/%d/like", post.ID) } hx-target="#like-button" hx-swap="outerHTML" class="btn btn-outline-primary">
							<i class="fas fa-thumbs-up"></i> <span id="likes-count">{ strconv.Itoa(post.LikesCount) }</span>
						</button>
						<small class="text-muted ml-2">Like this post</small>
					}
				</div>
				<h2 class="text-2xl font-bold mb-4 mt-4">Comments</h2>
				<div class="list-group" id="comments-section">
					for _, comment := range post.Comments {
						<div class="list-group-item list-group-item-action mt-2 pt-2" id={ fmt.Sprintf("comment-%d", comment.ID) }>
							<div class="d-flex justify-content-between">
								<p class="text-gray-700 mb-1"><strong>{ comment.User.Username }</strong> posted on { comment.FormattedCreatedAt }</p>
								// Only show delete button if the user is the comment author or post owner
								if loggedIn && (isOwner || comment.UserID == loggedInUserID) {
									<div>
										<button
											class="btn btn-sm btn-outline-danger delete-comment-btn"
											hx-delete={ fmt.Sprintf("/protected/comments/%d", comment.ID) }
											hx-confirm="Are you sure you want to delete this comment?"
											hx-target={ fmt.Sprintf("#comment-%d", comment.ID) }
											hx-swap="outerHTML"
										>
											<i class="fas fa-trash"></i> Delete
										</button>
									</div>
								}
							</div>
							<p class="text-gray-700 comment-content">{ comment.Content }</p>
						</div>
					}
				</div>
				if loggedIn {
					<div id="comment-loading" class="htmx-indicator">
						<div class="spinner-border text-primary" role="status">
							<span class="sr-only">Loading...</span>
						</div>
					</div>
					<form
						hx-post={ fmt.Sprintf("/protected/posts/%d/comments", post.ID) }
						hx-target="#comments-section"
						hx-swap="afterbegin"
						hx-trigger="submit"
						class="mt-3"
						hx-headers='{"Accept": "text/html"}'
						hx-indicator="#comment-loading"
						id="comment-form"
						hx-on:after-request="resetCommentForm()"
					>
						<div>
							<textarea name="content" placeholder="Add a Comment" class="form-control" required></textarea>
						</div>
						<div class="text-center mt-3">
							<button type="submit" class="btn btn-primary">Submit</button>
						</div>
					</form>
				} else {
					<p class="text-gray-500">Please login to add a comment</p>
				}
				<a href={ templ.URL("/blogs/" + fmt.Sprintf("%d", post.BlogID)) } class="inline-block mb-4 text-indigo-400 hover:text-indigo-700">
					&larr; Back to User's Blog Page
				</a>
			</div>
			@SharedComponents()
		</body>
	</html>
}
